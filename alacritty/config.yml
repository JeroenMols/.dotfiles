shell:
  program: /opt/homebrew/bin/tmux
  args:
   - -u
   - -l
   - new-session
   - -A
   - -s
   - sys

# Configuration for Alacritty, the GPU enhanced terminal emulator.

# Import additional configuration files
#
# These configuration files will be loaded in order, replacing values in files
# loaded earlier with those loaded later in the chain. The file itself will
# always be loaded last.
#import:
#  - /path/to/alacritty.yml

# Any items in the `env` entry below will be added as
# environment variables. Some entries may override variables
# set by alacritty itself.
#env:
  # TERM variable
  #
  # This value is used to set the `$TERM` environment variable for
  # each instance of Alacritty. If it is not present, alacritty will
  # check the local terminfo database and use `alacritty` if it is
  # available, otherwise `xterm-256color` is used.
  #TERM: alacritty
  #LANG: en_US.UTF-8

window:
  # Window dimensions (changes require restart)
  #
  # Specified in number of columns/lines, not pixels.
  # If both are `0`, this setting is ignored.
  dimensions:
    columns: 212 # 138
    lines: 79

  # Window position (changes require restart)
  #
  # Specified in number of pixels.
  # If the position is not set, the window manager will handle the placement.
  position:
    x: 5000 # 1920
    y: 0

  # Window padding
  #
  # Blank space added around the window in pixels. This padding is scaled
  # by DPI and the specified value is always added at both opposing sides.
  padding:
    x: 6
    y: 4

  # Spread additional padding evenly around the terminal content.
  dynamic_padding: true

  # Window decorations
  #
  # Values for `decorations`:
  #     - full: Borders and title bar
  #     - none: Neither borders nor title bar
  #
  # Values for `decorations` (macOS only):
  #     - transparent: Title bar, transparent background and title bar buttons
  #     - buttonless: Title bar, transparent background, but no title bar buttons
  decorations: buttonless

  # Startup Mode (changes require restart)
  #
  # Values for `startup_mode`:
  #   - Windowed
  #   - Maximized
  #   - Fullscreen
  #
  # Values for `startup_mode` (macOS only):
  #   - SimpleFullscreen
  startup_mode: Windowed

  # Window title
  #title: Alacritty

  # Allow terminal applications to change Alacritty's window title.
  dynamic_title: true

  # Window class (Linux/BSD only):
  #class:
    # Application instance name
    #instance: Alacritty
    # General application class
    #general: Alacritty

  # GTK theme variant (Linux/BSD only)
  #
  # Override the variant of the GTK theme. Commonly supported values are `dark` and `light`.
  # Set this to `None` to use the default theme variant.
  #gtk_theme_variant: None

scrolling:
  # Maximum number of lines in the scrollback buffer.
  # Specifying '0' will disable scrolling.
  history: 0 # Not helpful when using tmux

  # Scrolling distance multiplier.
  multiplier: 3

# Font configuration
font:
  # Normal (roman) font face
  normal:
    # Font family
    #
    # Default:
    #   - (macOS) Menlo
    #   - (Linux) monospace
    #   - (Windows) Consolas
    family:  Hasklug Nerd Font Mono

    # The `style` can be specified to pick a specific face.
    style: Regular

  # Bold font face
  bold:
    style: Bold

  # Italic font face
  italic:
    family:  Victor Mono
    style: Italic

  # Bold italic font face
  bold_italic:
    family:  Victor Mono
    style: Bold Italic

  # Point size
  size: 13.0

  # Offset is the extra space around each character. `offset.y` can be thought of
  # as modifying the line spacing, and `offset.x` as modifying the letter spacing.
  offset:
    x: 0
    y: 0

  # Glyph offset determines the locations of the glyphs within their cells with
  # the default being at the bottom. Increasing `x` moves the glyph to the right,
  # increasing `y` moves the glyph upward.
  glyph_offset:
    x: 0
    y: 0

# Colors (Tomorrow Night)
#colors:
  # Default colors
  #primary:
  #  background: '#1d1f21'
  #  foreground: '#c5c8c6'

    # Bright and dim foreground colors
    #
    # The dimmed foreground color is calculated automatically if it is not present.
    # If the bright foreground color is not set, or `draw_bold_text_with_bright_colors`
    # is `false`, the normal foreground color will be used.
    #dim_foreground: '#828482'
    #bright_foreground: '#eaeaea'

  # Cursor colors
  #
  # Colors which should be used to draw the terminal cursor.
  #
  # Allowed values are CellForeground and CellBackground, which reference the
  # affected cell, or hexadecimal colors like #ff00ff.
  #cursor:
  #  text: CellBackground
  #  cursor: CellForeground

  # Vi mode cursor colors
  #
  # Colors for the cursor when the vi mode is active.
  #
  # Allowed values are CellForeground and CellBackground, which reference the
  # affected cell, or hexadecimal colors like #ff00ff.
  #vi_mode_cursor:
  #  text: CellBackground
  #  cursor: CellForeground

  # Selection colors
  #
  # Colors which should be used to draw the selection area.
  #
  # Allowed values are CellForeground and CellBackground, which reference the
  # affected cell, or hexadecimal colors like #ff00ff.
  #selection:
  #  text: CellBackground
  #  background: CellForeground

  # Search colors
  #
  # Colors used for the search bar and match highlighting.
  #search:
    # Allowed values are CellForeground and CellBackground, which reference the
    # affected cell, or hexadecimal colors like #ff00ff.
    #matches:
    #  foreground: '#000000'
    #  background: '#ffffff'

    #bar:
    #  background: '#c5c8c6'
    #  foreground: '#1d1f21'

  # Normal colors
  #normal:
  #  black:   '#1d1f21'
  #  red:     '#cc6666'
  #  green:   '#b5bd68'
  #  yellow:  '#f0c674'
  #  blue:    '#81a2be'
  #  magenta: '#b294bb'
  #  cyan:    '#8abeb7'
  #  white:   '#c5c8c6'

  # Bright colors
  #bright:
  #  black:   '#666666'
  #  red:     '#d54e53'
  #  green:   '#b9ca4a'
  #  yellow:  '#e7c547'
  #  blue:    '#7aa6da'
  #  magenta: '#c397d8'
  #  cyan:    '#70c0b1'
  #  white:   '#eaeaea'

  # Dim colors
  #
  # If the dim colors are not set, they will be calculated automatically based
  # on the `normal` colors.
  #dim:
  #  black:   '#131415'
  #  red:     '#864343'
  #  green:   '#777c44'
  #  yellow:  '#9e824c'
  #  blue:    '#556a7d'
  #  magenta: '#75617b'
  #  cyan:    '#5b7d78'
  #  white:   '#828482'

  # Indexed Colors
  #
  # The indexed colors include all colors from 16 to 256.
  # When these are not set, they're filled with sensible defaults.
  #
  # Example:
  #   `- { index: 16, color: '#ff00ff' }`
  #
  #indexed_colors: []


# https://github.com/altercation/solarized
# SOLARIZED HEX     16/8 TERMCOL  XTERM/HEX   L*A*B      RGB         HSB
# --------- ------- ---- -------  ----------- ---------- ----------- -----------
# base03    #002b36  8/4 brblack  234 #1c1c1c 15 -12 -12   0  43  54 193 100  21
# base02    #073642  0/4 black    235 #262626 20 -12 -12   7  54  66 192  90  26
# base01    #586e75 10/7 brgreen  240 #585858 45 -07 -07  88 110 117 194  25  46
# base00    #657b83 11/7 bryellow 241 #626262 50 -07 -07 101 123 131 195  23  51
# base0     #839496 12/6 brblue   244 #808080 60 -06 -03 131 148 150 186  13  59
# base1     #93a1a1 14/4 brcyan   245 #8a8a8a 65 -05 -02 147 161 161 180   9  63
# base2     #eee8d5  7/7 white    254 #e4e4e4 92 -00  10 238 232 213  44  11  93
# base3     #fdf6e3 15/7 brwhite  230 #ffffd7 97  00  10 253 246 227  44  10  99
# yellow    #b58900  3/3 yellow   136 #af8700 60  10  65 181 137   0  45 100  71
# orange    #cb4b16  9/3 brred    166 #d75f00 50  50  55 203  75  22  18  89  80
# red       #dc322f  1/1 red      160 #d70000 50  65  45 220  50  47   1  79  86
# magenta   #d33682  5/5 magenta  125 #af005f 50  65 -05 211  54 130 331  74  83
# violet    #6c71c4 13/5 brmagenta 61 #5f5faf 50  15 -45 108 113 196 237  45  77
# blue      #268bd2  4/4 blue      33 #0087ff 55 -10 -45  38 139 210 205  82  82
# cyan      #2aa198  6/6 cyan      37 #00afaf 60 -35 -05  42 161 152 175  74  63
# green     #859900  2/2 green     64 #5f8700 60 -20  65 133 153   0  68 100  60


sol:
  base03:  &base03   '0x002b36'
  base02:  &base02   '0x073642'
  base01:  &base01   '0x586e75'
  base00:  &base00   '0x657b83'
  base0:   &base0    '0x839496'
  base1:   &base1    '0x93a1a1'
  base2:   &base2    '0xeee8d5'
  base3:   &base3    '0xfdf6e3'
  yellow:  &yellow   '0xb58900'
  orange:  &orange   '0xcb4b16'
  red:     &red      '0xdc322f'
  magenta: &magenta  '0xd33682'
  violet:  &violet   '0x6c71c4'
  blue:    &blue     '0x268bd2'
  cyan:    &cyan     '0x2aa198'
  green:   &green    '0x859900'

solarized_light: &solarized_light
  primary:
    background: *base3
    foreground: *base00
    #dim_background: *base3
    #bright_foreground: *base01

  cursor:
    text: *base3
    cursor: '0x92a800'

  selection:
    text: *base03
    background: *base2

  normal:
    red:     *red
    green:   *green
    blue:    *blue
    cyan:    *cyan
    magenta: *magenta
    yellow:  *yellow
    black:   *base03
    white:   *base2

  bright: # Using normal color with 6% increase in HSB brightness
    red:     '0xeb3532'
    green:   '0x92a800'
    blue:    '0x2995e0'
    cyan:    '0x2eb0a6'
    magenta: '0xe33a8c'
    yellow:  '0xc49500'
    black:   *base01
    white:   *base3

  dim: # Using normal color with 6% decrease in HSB brightness
    red:     '0xcc2e2c'
    green:   '0x788a00'
    blue:    '0x2380c2'
    cyan:    '0x269189'
    magenta: '0xc43279'
    yellow:  '0xa87e00'
    black:   *base02
    white:   *base3

# Colors (Solarized)
solarized: &solarized
 # Default colors
  primary:
    background: '0x002b36'
    foreground: '0x839496'

  # Normal colors
  normal:
    black:   '0x073642'
    red:     '0xdc322f'
    green:   '0x859900'
    yellow:  '0xb58900'
    blue:    '0x268bd2'
    magenta: '0xd33682'
    cyan:    '0x2aa198'
    white:   '0xeee8d5'

  # Bright colors
  bright:
    black:   '0x002b36'
    red:     '0xcb4b16'
    green:   '0x586e75'
    yellow:  '0x657b83'
    blue:    '0x839496'
    magenta: '0x6c71c4'
    cyan:    '0x93a1a1'
    white:   '0xfdf6e3'

  #dim:
  #  black:   '0x000000'
  #  red:     '0x8c3336'
  #  green:   '0x7a8530'
  #  yellow:  '0x97822e'
  #  blue:    '0x506d8f'
  #  magenta: '0x80638e'
  #  cyan:    '0x497e7a'
  #  white:   '0x9a9a9a'

  indexed_colors: []

monokai_charcoal: &monokai_charcoal
  primary:
    background: "#000000"
    foreground: "#FFFFFF"

  # Normal Colours
  normal:
    black: "#000000"
    red: "#f4005f"
    green: "#98e024"
    yellow: "#fa8419"
    blue: "#9d65ff"
    magenta: "#f4005f"
    cyan: "#58d1eb"
    white: "#c4c5b5"

  # Bright Colours
  bright:
    black: "#625e4c"
    red: "#f4005f"
    green: "#98e024"
    yellow: "#e0d561"
    blue: "#9d65ff"
    magenta: "#f4005f"
    cyan: "#58d1eb"
    white: "#f6f6ef"

colors: *monokai_charcoal

# Bell
#
# The bell is rung every time the BEL control character is received.
bell:
  # Visual Bell Animation
  #
  # Animation effect for flashing the screen when the visual bell is rung.
  #
  # Values for `animation`:
  #   - Ease
  #   - EaseOut
  #   - EaseOutSine
  #   - EaseOutQuad
  #   - EaseOutCubic
  #   - EaseOutQuart
  #   - EaseOutQuint
  #   - EaseOutExpo
  #   - EaseOutCirc
  #   - Linear
  animation: EaseOutQuad

  # Duration of the visual bell flash. A `duration` of `0` will disable the
  # visual bell animation.
  duration: 0

  # Visual bell animation color.
  color: '#000000'

  # Bell Command
  #
  # This program is executed whenever the bell is rung.
  #
  # When set to `command: None`, no command will be executed.
  #
  # Example:
  #   command:
  #     program: notify-send
  #     args: ["Hello, World!"]
  #
  #command: None

#selection:
  # This string contains all characters that are used as separators for "semantic words" in Alacritty.
  #semantic_escape_chars: ",│`|:\"' ()[]{}<>\t"

  # When set to `true`, selected text will be copied to the primary clipboard.
  #save_to_clipboard: false

cursor:
  # Cursor style
  #
  # Values for `style`:
  #   - ▇ Block
  #   - _ Underline
  #   - | Beam
  style: Block

  # Vi mode cursor style
  #
  # If the vi mode cursor style is `None` or not specified, it will fall back to
  # the style of the active value of the normal cursor.
  #
  # See `cursor.style` for available options.
  vi_mode_style: Block

  # If this is `true`, the cursor will be rendered as a hollow box when the
  # window is not focused.
  #unfocused_hollow: true

  # Thickness of the cursor relative to the cell width as floating point number
  # from `0.0` to `1.0`.
  #thickness: 0.15

# Live config reload (changes require restart)
live_config_reload: true

# Shell
#
# You can set `shell.program` to the path of your favorite shell, e.g. `/bin/fish`.
# Entries in `shell.args` are passed unmodified as arguments to the shell.
#
# Default:
#   - (macOS) /bin/bash --login
#   - (Linux/BSD) user login shell
#   - (Windows) powershell
#shell:
#  program: /bin/bash
#  args:
#    - --login

# Startup directory
#
# Directory the shell is started in. If this is unset, or `None`, the working
# directory of the parent process will be used.
#working_directory: None

# WinPTY backend (Windows only)
#
# Alacritty defaults to using the newer ConPTY backend if it is available,
# since it resolves a lot of bugs and is quite a bit faster. If it is not
# available, the WinPTY backend will be used instead.
#
# Setting this option to `true` makes Alacritty use the legacy WinPTY backend,
# even if the ConPTY backend is available.
#winpty_backend: false

# Send ESC (\x1b) before characters when alt is pressed.
#alt_send_esc: true

mouse:
  # Click settings
  #
  # The `double_click` and `triple_click` settings control the time
  # alacritty should wait for accepting multiple clicks as one double
  # or triple click.
  #double_click: { threshold: 300 }
  #triple_click: { threshold: 300 }

  # If this is `true`, the cursor is temporarily hidden when typing.
  hide_when_typing: true

# Mouse bindings
#
# Mouse bindings are specified as a list of objects, much like the key
# bindings further below.
#
# To trigger mouse bindings when an application running within Alacritty captures the mouse, the
# `Shift` modifier is automatically added as a requirement.
#
# Each mouse binding will specify a:
#
# - `mouse`:
#
#   - Middle
#   - Left
#   - Right
#   - Numeric identifier such as `5`
#
# - `action` (see key bindings)
#
# And optionally:
#
# - `mods` (see key bindings)
#mouse_bindings:
#  - { mouse: Middle, action: PasteSelection }

# Key bindings
#
# Key bindings are specified as a list of objects. For example, this is the
# default paste binding:
#
# `- { key: V, mods: Control|Shift, action: Paste }`
#
# Each key binding will specify a:
#
# - `key`: Identifier of the key pressed
#
#    - A-Z
#    - F1-F24
#    - Key0-Key9
#
#    A full list with available key codes can be found here:
#    https://docs.rs/glutin/*/glutin/event/enum.VirtualKeyCode.html#variants
#
#    Instead of using the name of the keys, the `key` field also supports using
#    the scancode of the desired key. Scancodes have to be specified as a
#    decimal number. This command will allow you to display the hex scancodes
#    for certain keys:
#
#       `showkey --scancodes`.
#
# Then exactly one of:
#
# - `chars`: Send a byte sequence to the running application
#
#    The `chars` field writes the specified string to the terminal. This makes
#    it possible to pass escape sequences. To find escape codes for bindings
#    like `PageUp` (`"\x1b[5~"`), you can run the command `showkey -a` outside
#    of tmux. Note that applications use terminfo to map escape sequences back
#    to keys. It is therefore required to update the terminfo when changing an
#    escape sequence.
#
# - `action`: Execute a predefined action
#
#   - ToggleViMode
#   - SearchForward
#       Start searching toward the right of the search origin.
#   - SearchBackward
#       Start searching toward the left of the search origin.
#   - Copy
#   - Paste
#   - IncreaseFontSize
#   - DecreaseFontSize
#   - ResetFontSize
#   - ScrollPageUp
#   - ScrollPageDown
#   - ScrollHalfPageUp
#   - ScrollHalfPageDown
#   - ScrollLineUp
#   - ScrollLineDown
#   - ScrollToTop
#   - ScrollToBottom
#   - ClearHistory
#       Remove the terminal's scrollback history.
#   - Hide
#       Hide the Alacritty window.
#   - Minimize
#       Minimize the Alacritty window.
#   - Quit
#       Quit Alacritty.
#   - ToggleFullscreen
#   - SpawnNewInstance
#       Spawn a new instance of Alacritty.
#   - ClearLogNotice
#       Clear Alacritty's UI warning and error notice.
#   - ClearSelection
#       Remove the active selection.
#   - ReceiveChar
#   - None
#
#   (`mode: Vi` only):
#   - Open
#       Open URLs at the cursor location with the launcher configured in `url.launcher`.
#   - Up
#       Move the vi mode cursor up by one line.
#   - Down
#       Move the vi mode cursor down by one line.
#   - Left
#       Move the vi mode cursor left by one character.
#   - Right
#       Move the vi mode cursor right by one character.
#   - First
#       Move the vi mode cursor to the start of the line, searching across newlines if it is already at the beginning.
#   - Last
#       Move the vi mode cursor to the end of the line, searching across newlines if it is already at the end.
#   - FirstOccupied
#       Move the vi mode cursor to the first non-empty cell in this line, searching across newlines if it is already at the first one.
#   - High
#       Move the vi mode cursor to the top of the screen.
#   - Middle
#       Move the vi mode cursor to the middle of the screen.
#   - Low
#       Move the vi mode cursor to the bottom of the screen.
#   - SemanticLeft
#       Move the vi mode cursor to the start of the previous semantically separated word.
#   - SemanticRight
#       Move the vi mode cursor to the start of the next semantically separated word.
#   - SemanticLeftEnd
#       Move the vi mode cursor to the end of the previous semantically separated word.
#   - SemanticRightEnd
#       Move the vi mode cursor to the end of the next semantically separated word.
#   - WordLeft
#       Move the vi mode cursor to the start of the previous whitespace separated word.
#   - WordRight
#       Move the vi mode cursor to the start of the next whitespace separated word.
#   - WordLeftEnd
#       Move the vi mode cursor to the end of the previous whitespace separated word.
#   - WordRightEnd
#       Move the vi mode cursor to the end of the next whitespace separated word.
#   - Bracket
#       Move the vi mode cursor to the next character that matches the bracket at the cursor's
#       current location.
#   - ToggleNormalSelection
#   - ToggleLineSelection
#   - ToggleBlockSelection
#   - ToggleSemanticSelection
#       Toggle semantic selection based on `selection.semantic_escape_chars`.
#   - SearchNext
#       Jump to the beginning of the next match.
#   - SearchPrevious
#       Jump to the beginning of the previous match.
#   - SearchStart
#       Jump to the next start of a match to the left of the vi mode cursor.
#   - SearchEnd
#       Jump to the next end of a match to the left of the vi mode cursor.
#
#   (macOS only):
#   - ToggleSimpleFullscreen
#       Enter fullscreen without occupying another space.
#
#   (Linux/BSD only):
#   - CopySelection
#       Copy from the selection buffer.
#   - PasteSelection
#       Paste from the selection buffer.
#
# - `command`: Fork and execute a specified command plus arguments
#
#    The `command` field must be a map containing a `program` string and an
#    `args` array of command line parameter strings. For example:
#       `{ program: "alacritty", args: ["-e", "vttest"] }`
#
# And optionally:
#
# - `mods`: Key modifiers to filter binding actions
#
#    - Command
#    - Control
#    - Option
#    - Super
#    - Shift
#    - Alt
#
#    Multiple `mods` can be combined using `|` like this:
#       `mods: Control|Shift`.
#    Whitespace and capitalization are relevant and must match the example.
#
# - `mode`: Indicate a binding for only specific terminal reported modes
#
#    This is mainly used to send applications the correct escape sequences
#    when in different modes.
#
#    - AppCursor
#    - AppKeypad
#    - Alt
#    - Vi
#
#    A `~` operator can be used before a mode to apply the binding whenever
#    the mode is *not* active, e.g. `~Alt`.
#
# Bindings are always filled by default, but will be replaced when a new
# binding with the same triggers is defined. To unset a default binding, it can
# be mapped to the `ReceiveChar` action. Alternatively, you can use `None` for
# a no-op if you do not wish to receive input characters for that binding.
#
# If the same trigger is assigned to multiple actions, all of them are executed
# in the order they were defined in.
keyboard:
  bindings:
    # (Windows/Linux only)
    #- { key: V,        mods: Control|Shift, action: Paste            }
    #- { key: C,        mods: Control|Shift, action: Copy             }
    #- { key: Insert,   mods: Shift,         action: PasteSelection   }
    #- { key: Key0,     mods: Control,       action: ResetFontSize    }
    #- { key: Equals,   mods: Control,       action: IncreaseFontSize }
    #- { key: Add,      mods: Control,       action: IncreaseFontSize }
    #- { key: Subtract, mods: Control,       action: DecreaseFontSize }
    #- { key: Minus,    mods: Control,       action: DecreaseFontSize }

    # (macOS only)
    #- { key: Key0,   mods: Command, action: ResetFontSize    }
    #- { key: Equals, mods: Command, action: IncreaseFontSize }
    #- { key: Add,    mods: Command, action: IncreaseFontSize }
    #- { key: Minus,  mods: Command, action: DecreaseFontSize }
    #- { key: K,      mods: Command, action: ClearHistory     }
    #- { key: K,      mods: Command, chars: "\x0c"            }
    #- { key: V,      mods: Command, action: Paste            }
    #- { key: C,      mods: Command, action: Copy             }
    #- { key: H,      mods: Command, action: Hide             }
    - { key: H,      mods: Command, action: None             }
    #- { key: Q,      mods: Command, action: Quit             }
    #- { key: W,      mods: Command, action: Quit             }

    #- { key: Comma,    mods: Command, command: {program: *tmux, args: ["new-window", "-n", "alacritty.yml", "/usr/bin/vim", "/Users/afh/.config/alacritty/alacritty.yml"]}   }
    #- { key: Slash,        mods: Command|Shift, command: {program: *tmux, args: ["new-window", "-n", "help", "zsh /Users/afh/.config/zsh/functions/tman|less"]}   }

    #- { key: N,        mods: Command, action: SpawnNewInstance                 }

    # alacritty + tmux = <3 ftw!
    - { key: LBracket, mods: Command,         chars: "\x01<"                   }
    - { key: RBracket, mods: Command,         chars: "\x01>"                   }
    - { key: LBracket, mods: Command|Shift,   chars: "\x01p"                   }
    - { key: RBracket, mods: Command|Shift,   chars: "\x01n"                   }
    - { key: LBracket, mods: Command|Control, chars: "\x01("                   }
    - { key: RBracket, mods: Command|Control, chars: "\x01)"                   }
    - { key: Equals,   mods: Command|Shift,   chars: "\x01E"                   }
    - { key: N,        mods: Command,         chars: "\x01\x13"                }
    - { key: T,        mods: Command,         chars: "\x01c"                   }
    - { key: T,        mods: Command|Alt,     chars: "\x01,"                   }
    - { key: D,        mods: Command,         chars: "\x01="                   }
    - { key: D,        mods: Command|Shift,   chars: "\x01\""                  }
  #  - { key: F,        mods: Command,         chars: "\x01f"                   }
    - { key: F,        mods: Command|Shift,   chars: "\x01\x06"                }
    - { key: M,        mods: Command,         chars: "\x01m"                   }
    - { key: M,        mods: Command|Shift,   chars: "\x01."                   }
    - { key: I,        mods: Command|Control, chars: "\x01\x09"                }
    - { key: U,        mods: Command|Control, chars: "\x01\x15"                }
    - { key: W,        mods: Command,         chars: "\x01\x17"                }
    - { key: L,        mods: Command,         chars: "\x01 "                   }
    - { key: Backslash,mods: Command|Shift,   chars: "\x01s"                   }
    - { key: H,        mods: Command|Shift,   chars: "\x01H"                   }
    - { key: J,        mods: Command|Shift,   chars: "\x01J"                   }
    - { key: K,        mods: Command|Shift,   chars: "\x01K"                   }
    - { key: L,        mods: Command|Shift,   chars: "\x01L"                   }
    - { key: H,        mods: Command|Control, chars: "\x01h"                   }
    - { key: J,        mods: Command|Control, chars: "\x01j"                   }
    - { key: K,        mods: Command|Control, chars: "\x01k"                   }
    - { key: L,        mods: Command|Control, chars: "\x01l"                   }
    - { key: Key1,     mods: Command,         chars: "\x01!"                   }
    - { key: Key2,     mods: Command,         chars: "\x01@"                   }
    - { key: Key3,     mods: Command,         chars: "\x01#"                   }
    - { key: Key4,     mods: Command,         chars: "\x01$"                   }
    - { key: Key5,     mods: Command,         chars: "\x01%"                   }
    - { key: Key8,     mods: Command|Shift,   chars: "\x01*"                   }
    #- { key: K,        mods: Command|Control, chars: "\x01J"                   }

    - { key: Paste,                   action: Paste                            }
    - { key: Copy,                    action: Copy                             }
    - { key: L,        mods: Control, action: ClearLogNotice                   }
    - { key: L,        mods: Control, chars: "\x0c"                            }
    - { key: Home,     mods: Alt,     chars: "\x1b[1;3H"                       }
    - { key: Home,                    chars: "\x1bOH",        mode: AppCursor  }
    - { key: Home,                    chars: "\x1b[H",        mode: ~AppCursor }
    - { key: End,      mods: Alt,     chars: "\x1b[1;3F"                       }
    - { key: End,                     chars: "\x1bOF",        mode: AppCursor  }
    - { key: End,                     chars: "\x1b[F",        mode: ~AppCursor }
    - { key: PageUp,   mods: Shift,   action: ScrollPageUp,   mode: ~Alt       }
    - { key: PageUp,   mods: Shift,   chars: "\x1b[5;2~",     mode: Alt        }
    - { key: PageUp,   mods: Control, chars: "\x1b[5;5~"                       }
    - { key: PageUp,   mods: Alt,     chars: "\x1b[5;3~"                       }
    - { key: PageUp,                  chars: "\x1b[5~"                         }
    - { key: PageDown, mods: Shift,   action: ScrollPageDown, mode: ~Alt       }
    - { key: PageDown, mods: Shift,   chars: "\x1b[6;2~",     mode: Alt        }
    - { key: PageDown, mods: Control, chars: "\x1b[6;5~"                       }
    - { key: PageDown, mods: Alt,     chars: "\x1b[6;3~"                       }
    - { key: PageDown,                chars: "\x1b[6~"                         }
    - { key: Tab,      mods: Shift,   chars: "\x1b[Z"                          }
    - { key: Back,                    chars: "\x7f"                            }
    - { key: Back,     mods: Alt,     chars: "\x1b\x7f"                        }
    - { key: Insert,                  chars: "\x1b[2~"                         }
    - { key: Delete,                  chars: "\x1b[3~"                         }
    - { key: Left,     mods: Shift,   chars: "\x1b[1;2D"                       }
    - { key: Left,     mods: Control, chars: "\x1b[1;5D"                       }
    - { key: Left,     mods: Alt,     chars: "\x1b[1;3D"                       }
    - { key: Left,                    chars: "\x1b[D",        mode: ~AppCursor }
    - { key: Left,                    chars: "\x1bOD",        mode: AppCursor  }
    - { key: Right,    mods: Shift,   chars: "\x1b[1;2C"                       }
    - { key: Right,    mods: Control, chars: "\x1b[1;5C"                       }
    - { key: Right,    mods: Alt,     chars: "\x1b[1;3C"                       }
    - { key: Right,                   chars: "\x1b[C",        mode: ~AppCursor }
    - { key: Right,                   chars: "\x1bOC",        mode: AppCursor  }
    - { key: Up,       mods: Shift,   chars: "\x1b[1;2A"                       }
    - { key: Up,       mods: Control, chars: "\x1b[1;5A"                       }
    - { key: Up,       mods: Alt,     chars: "\x1b[1;3A"                       }
    - { key: Up,                      chars: "\x1b[A",        mode: ~AppCursor }
    - { key: Up,                      chars: "\x1bOA",        mode: AppCursor  }
    - { key: Down,     mods: Shift,   chars: "\x1b[1;2B"                       }
    - { key: Down,     mods: Control, chars: "\x1b[1;5B"                       }
    - { key: Down,     mods: Alt,     chars: "\x1b[1;3B"                       }
    - { key: Down,                    chars: "\x1b[B",        mode: ~AppCursor }
    - { key: Down,                    chars: "\x1bOB",        mode: AppCursor  }
    - { key: F1,                      chars: "\x1bOP"                          }
    - { key: F2,                      chars: "\x1bOQ"                          }
    - { key: F3,                      chars: "\x1bOR"                          }
    - { key: F4,                      chars: "\x1bOS"                          }
    - { key: F5,                      chars: "\x1b[15~"                        }
    - { key: F6,                      chars: "\x1b[17~"                        }
    - { key: F7,                      chars: "\x1b[18~"                        }
    - { key: F8,                      chars: "\x1b[19~"                        }
    - { key: F9,                      chars: "\x1b[20~"                        }
    - { key: F10,                     chars: "\x1b[21~"                        }
    - { key: F11,                     chars: "\x1b[23~"                        }
    - { key: F12,                     chars: "\x1b[24~"                        }
    - { key: F1,       mods: Shift,   chars: "\x1b[1;2P"                       }
    - { key: F2,       mods: Shift,   chars: "\x1b[1;2Q"                       }
    - { key: F3,       mods: Shift,   chars: "\x1b[1;2R"                       }
    - { key: F4,       mods: Shift,   chars: "\x1b[1;2S"                       }
    - { key: F5,       mods: Shift,   chars: "\x1b[15;2~"                      }
    - { key: F6,       mods: Shift,   chars: "\x1b[17;2~"                      }
    - { key: F7,       mods: Shift,   chars: "\x1b[18;2~"                      }
    - { key: F8,       mods: Shift,   chars: "\x1b[19;2~"                      }
    - { key: F9,       mods: Shift,   chars: "\x1b[20;2~"                      }
    - { key: F10,      mods: Shift,   chars: "\x1b[21;2~"                      }
    - { key: F11,      mods: Shift,   chars: "\x1b[23;2~"                      }
    - { key: F12,      mods: Shift,   chars: "\x1b[24;2~"                      }
    - { key: F1,       mods: Control, chars: "\x1b[1;5P"                       }
    - { key: F2,       mods: Control, chars: "\x1b[1;5Q"                       }
    - { key: F3,       mods: Control, chars: "\x1b[1;5R"                       }
    - { key: F4,       mods: Control, chars: "\x1b[1;5S"                       }
    - { key: F5,       mods: Control, chars: "\x1b[15;5~"                      }
    - { key: F6,       mods: Control, chars: "\x1b[17;5~"                      }
    - { key: F7,       mods: Control, chars: "\x1b[18;5~"                      }
    - { key: F8,       mods: Control, chars: "\x1b[19;5~"                      }
    - { key: F9,       mods: Control, chars: "\x1b[20;5~"                      }
    - { key: F10,      mods: Control, chars: "\x1b[21;5~"                      }
    - { key: F11,      mods: Control, chars: "\x1b[23;5~"                      }
    - { key: F12,      mods: Control, chars: "\x1b[24;5~"                      }
    - { key: F1,       mods: Alt,     chars: "\x1b[1;6P"                       }
    - { key: F2,       mods: Alt,     chars: "\x1b[1;6Q"                       }
    - { key: F3,       mods: Alt,     chars: "\x1b[1;6R"                       }
    - { key: F4,       mods: Alt,     chars: "\x1b[1;6S"                       }
    - { key: F5,       mods: Alt,     chars: "\x1b[15;6~"                      }
    - { key: F6,       mods: Alt,     chars: "\x1b[17;6~"                      }
    - { key: F7,       mods: Alt,     chars: "\x1b[18;6~"                      }
    - { key: F8,       mods: Alt,     chars: "\x1b[19;6~"                      }
    - { key: F9,       mods: Alt,     chars: "\x1b[20;6~"                      }
    - { key: F10,      mods: Alt,     chars: "\x1b[21;6~"                      }
    - { key: F11,      mods: Alt,     chars: "\x1b[23;6~"                      }
    - { key: F12,      mods: Alt,     chars: "\x1b[24;6~"                      }
    - { key: F1,       mods: Super,   chars: "\x1b[1;3P"                       }
    - { key: F2,       mods: Super,   chars: "\x1b[1;3Q"                       }
    - { key: F3,       mods: Super,   chars: "\x1b[1;3R"                       }
    - { key: F4,       mods: Super,   chars: "\x1b[1;3S"                       }
    - { key: F5,       mods: Super,   chars: "\x1b[15;3~"                      }
    - { key: F6,       mods: Super,   chars: "\x1b[17;3~"                      }
    - { key: F7,       mods: Super,   chars: "\x1b[18;3~"                      }
    - { key: F8,       mods: Super,   chars: "\x1b[19;3~"                      }
    - { key: F9,       mods: Super,   chars: "\x1b[20;3~"                      }
    - { key: F10,      mods: Super,   chars: "\x1b[21;3~"                      }
    - { key: F11,      mods: Super,   chars: "\x1b[23;3~"                      }
    - { key: F12,      mods: Super,   chars: "\x1b[24;3~"                      }
    - { key: NumpadEnter,             chars: "\n"                              }

#debug:
  # Display the time it takes to redraw each frame.
  #render_timer: false

  # Keep the log file after quitting Alacritty.
  #persistent_logging: false

  # Log level
  #
  # Values for `log_level`:
  #   - None
  #   - Error
  #   - Warn
  #   - Info
  #   - Debug
  #   - Trace
  #log_level: Warn

  # Print all received window events.
  #print_events: false
